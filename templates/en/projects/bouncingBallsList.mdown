% rebase('templates/en/template.ptl', title="Bouncing Balls")

	<!-- Main Content -->
	<div class="container">

		<!-- Header -->
		<div id="pageHeader">
			<h1>
				Bouncing Balls (with Solution)
			</h1>
			<p>
        Problem written by Chris Piech.
        <br/>
        Day7: <code>BouncingBalls.java</code>
			</p>

		</div>
		<hr/>

		<div class="row">
			<div class="col-md-12">
        <p>
        This program creates a beautiful animation of colorful bouncing balls. The finished
        product could definitely make a solid screen saver.
        </p>
        <p>

        We'll have to generate 50 circles and place them randomly about the canvas. 
        Note that in addition to creating the balls, we'll also need to generate initial 
        x and y velocities for each ball. 
        These velocities should be random. Importantly, we will store the balls and 
        velocities in three ArrayLists. 
        We can decompose all of this into a function.
        </p>

					<center>
						<img style="width:500px;border:1px solid #000000" src="{{pathToRoot}}img/projects/bouncingBalls/demo.png">	
					</center>
        <p>
        On each iteration of the animation while loop, we'll also need to check for bounces on all of the 
        balls using an inner for loop. 
        </p>
				
			</div>
		</div>
		
		<div class="row">
			<div class="col-md-12">
				<h2>Solution</h2>


<pre id="editor" style="height:1050px">
/**
 * Class: BouncingBalls
 * -----------------
 * A program that bounces many balls simultaneously around the screen.
 */
public class BouncingBalls extends GraphicsProgram {
    private static final double BALL_SIZE = 20;
    private static final double N_BALLS = 50;

    private ArrayList<GOval> balls;
    private ArrayList<Double> ballVx;
    private ArrayList<Double> ballVy;
    private RandomGenerator rg = new RandomGenerator();

    public void run() {
        createBalls();
        while(true) {
            animateBalls();
            pause(10);
        }
    }

    private void animateBalls() {
        for(int i = 0; i < N_BALLS; i++) {
            GOval ball = balls.get(i);
            if(ball.getX() > getWidth() || ball.getX() < 0) {
                reflectX(i);
            }
            if(ball.getY() > getHeight() || ball.getY() < 0) {
                reflectY(i);
            }
            ball.move(ballVx.get(i), ballVy.get(i));
        }
    }

    private void reflectY(int i) {
        ballVy.set(i, -ballVy.get(i));
    }

    private void reflectX(int i) {
        ballVx.set(i, -ballVx.get(i));
    }

    private void createBalls() {
        balls = new ArrayList<GOval>();
        ballVx = new ArrayList<Double>();
        ballVy = new ArrayList<Double>();
        for(int i = 0; i < N_BALLS; i++) {
            double x = rg.nextDouble(0, getWidth() - BALL_SIZE);
            double y = rg.nextDouble(0, getHeight()- BALL_SIZE);

            double vx = rg.nextDouble(1, 3);
            double vy = rg.nextDouble(1, 3);

            GOval ball = new GOval(x, y, BALL_SIZE, BALL_SIZE);
            ball.setFilled(true);
            ball.setColor(rg.nextColor());
            add(ball);
            balls.add(ball);
            ballVx.add(vx);
            ballVy.add(vy);
        }
    }
}
</pre>
    
<script src="{{pathToRoot}}plugins/ace/ace.js" type="text/javascript" charset="utf-8"></script>
<script>
    var editor = ace.edit("editor");
   editor.setTheme('ace/theme/eclipse');
   editor.getSession().setMode("ace/mode/java");
   editor.setReadOnly(true);
   editor.setShowPrintMargin(false);
   editor.renderer.setShowGutter(false); 
    /*editor.setTheme("ace/theme/eclipse");
    editor.getSession().setMode("ace/mode/java");*/
</script>
	
	</div>
	</div>
